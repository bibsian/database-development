#------------#
# Classes and Methods (letter abbreviations)
#------------#
DialogPreview (QDialog, Ui_dialog)

DialogPopUp (QDialog, Ui_Dialog)

UiMainWindow (QMainWindow, Ui_MainWindow)
	
	A)get_sitebox: Catches the user input in the combo box specifying  how many unique
	site abbreviates are listed in the raw data (numsite).
		
		-Error: Number mismatch, number entered does not equal number derived from 
		data (sitelisttoadd)
		
		===PRIORITY_ToDo: Change the sitelisttoadd to be all lower case in case of misspellings
		
	B)col_view_handle: Handles the user input regarding the unique site abbreviations (sitelistoadd)
		
		-Error1: Name mismatch, abbreviations input do not match the abbrev. derived from
		the raw data.
			ToDo: Be able to handle spelling corrections	
	
	C)meta_data_check: Saves user input regarding lter location (lterlocation) and metadata globalid (globalid)
		
		-Error1: String mismatch, url entered does not correspond to url derived
		
		-Error2: Name mismatch, lter location entered does not match lter location derived from metadata

	D)site_coord_options: Catches user input regarding the checkboxes about whether spatial information
	is present in the metadata url (no/yes): Disables line edits depending on which is checked
	
	E)site_id_check: Catches user input from line edits where site abbreviations are entered (can be 2).
	Then compares the input to that derived from the raw data (sitelisttoadd) and get_sitebox (numsite) 
	infomration.
	Note the comparison is made on a list of strings that have been converted to ALL lowercase.
		
		-Error1: String mismatch, abbreviations input do no corresopnd to the derived abbreviations.
		
	
	F)site_coord_check: Catches user input from line edits regarding lattitude and longitutde coordinates.
	Checks the inputs against the number of sites designated in the get_sitebox (numsite):
		
		-Error1: Attribute mismatch, length of the string from user latitude inputs does not correspond
		to the correct number of sites from the combo box get_sitebox (numsite)
		
		-Error2: Attribute mismatch, length of the string from user longitude inputs does not correspond
		to the correct number of sites from the combo box get_sitebox (numsite)
	
	G)site_name_check: Catches user input from the line edits regarding site descriptions/names (sitenames).
	
		-Error1: Attribute mismatch, length of the string from user names input does not correspond
		to the correct number of sites from the combo box get_sitebox (numsite)
	
	H)site_concat:Concatenates the table for siteID information (siteDataAll).
	This is all dependent on which check box was checked for whether there is spatial 
	information available (no/yes)(ckSiteCoordY/N)
	
	siteID: site abbreviations (siteIDrecord_re)
	lterID: lterlocation
	lat: siteLatdec, coverts to float datatype
	long: siteLongdec, converts to float datatype
	descript: sitenames
	
		-Error1: Generic print
		-Error2: Generic print

	Then creates the datamodel (siteDataAllmodel) to display for the user to check
		
	
	I)upload_to_database: Performs query regarding information already input in the databse and compares
	that to the what is about to be pushed (site_concat). If check passes then loads to database.
		
		-Error1: Checked information already exist.
	
	J) conver_string_to_List: self explanatory helper function
	
	K) covert_string_to_decimal: self explanatory helper function
	
	L) open_file: Use QFileDialog to open a file from the computer
	
	M) quit_program: Uses QMessageBox to ask if the user really wants to quit (when exiting through menu)
		
		===ToDo: Disable exiting by clicking the close window 'x' button.
	
LterTableQuery(object)
	A)go

SiteTableQuery(object)
	A)go
	
PandasTableModel(QAbstractTableModel)
	A)rowCount
	B)columnCount
	C)headerData
	D)data
	E)flags

PandasTableModelEdit (QAbstractTableModel)
	A)rowCount
	B)columnCount
	C)headerData
	D)data
	E)flags
	F)setData
	
ltertable (sqlalchemy.ext.automap)

sitetable (sqlalchemy.ext.automap)

maintable (sqlalchemy.ext.automap)

taxatable (sqlalchemy.ext.automap)

rawtable (sqlalchemy.ext.automap)

#----------------#
#Stand Alone Files
#----------------#

Config.py - This file initiates the connection to the postgresql database, creates
the classes that represent postgresql tables, and establishes, a 'session' maker so
that we can program the transection to happen in individual units (called units of work).
Lastly this script creates a logging file to record all transactions that sqlalchemy has
with our program; files are dated and written as 'txt' files.
